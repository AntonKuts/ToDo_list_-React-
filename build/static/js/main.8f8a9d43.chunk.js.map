{"version":3,"sources":["AddNewTask.js","TasksList.js","EditForm.js","App.js","serviceWorker.js","index.js"],"names":["AddNewTask","_ref","addTasks","_useState","useState","_useState2","Object","slicedToArray","value","setValue","react_default","a","createElement","onSubmit","e","preventDefault","type","className","onChange","target","placeholder","maxLength","lib","TasksList","numberOfAllTasks","task","index","removeTask","completedTask","taskPositionСhange","editTask","editFormOpen","key","completed","text","onClick","disabled","waves","EditForm","toEdit","setEditFormOpen","addEditTasks","App","returnLocalStorage","JSON","parse","localStorage","getItem","allTasks","startTasks","tasks","setTasks","_useState3","_useState4","_useState5","_useState6","setToEdit","useEffect","asyncToGenerator","regenerator_default","mark","_callee","result","wrap","_context","prev","next","axios","sent","console","log","data","stop","this","ForLocalStorage","serialForLocalStorage","stringify","setItem","saveTasksInLocalStorage","Tasks","concat","toConsumableArray","splice","direction","temporaryStorage","src_AddNewTask","src_EditForm","map","arr","src_TasksList","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f8a9d43.chunk.js","sourcesContent":["import  React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Button } from 'react-materialize'\r\n\r\nfunction AddNewTask({ addTasks }) {\r\n  const [value, setValue] = useState(\"\");\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (!value) return;\r\n    addTasks(value);\r\n    setValue(\"\");\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"input\"\r\n        value={value}\r\n        onChange={e => setValue(e.target.value)}\r\n        placeholder=\"Write a new task\"\r\n        maxLength=\"20\"\r\n      />\r\n      <Button>Save or Enter</Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddNewTask;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Button } from 'react-materialize'\r\n\r\nfunction TasksList({ numberOfAllTasks, task, index, removeTask, completedTask, taskPositionСhange, editTask, editFormOpen }) {\r\n  return (\r\n    <div key={index}>\r\n      <div className=\"task\">\r\n        <p className={task.completed ? \"taskDone\" : \"\"}>{index+1}. {task.text}</p>\r\n      </div>\r\n        <div className=\"task\">\r\n        <Button onClick={() => completedTask(index)}> done </Button>\r\n        <Button onClick={() => removeTask(index)}> delete </Button>\r\n        <div className={editFormOpen ? \"displayNone task\" : \"task\"}>\r\n          <Button disabled={(index > 0) ? \"\" : \"disabled\"} onClick={() => taskPositionСhange(index, \"top\")}> top </Button>\r\n          <Button disabled={(index < numberOfAllTasks-1) ? \"\" : \"disabled\"} onClick={() => taskPositionСhange(index, \"down\")}> down </Button>\r\n          <Button waves='light' onClick={() => editTask(index)}> edit </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TasksList;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Button } from 'react-materialize'\r\n\r\nfunction EditForm({ addTasks, toEdit, setEditFormOpen, addEditTasks }) {\r\n  const [value, setValue] = useState(toEdit.text);\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (!value) return;\r\n    addEditTasks(toEdit.index, value);\r\n    setEditFormOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"edit\">\r\n      <form onSubmit={handleSubmit}>\r\n      <p>For edit № {toEdit.index+1}</p>\r\n        <input\r\n          key={toEdit.text}\r\n          type=\"text\"\r\n          className=\"input\"\r\n          value={value}\r\n          onChange={e => setValue(e.target.value)}\r\n          maxLength=\"20\"\r\n        />\r\n        <Button>Save changes or Enter</Button>\r\n      </form>\r\n      <Button onClick={() =>setEditFormOpen(false)}>cancel</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditForm;\r\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport AddNewTask from './AddNewTask';\nimport TasksList from './TasksList';\nimport EditForm from './EditForm';\nimport './App.css';\n\nfunction App() {\n  const [tasks, setTasks] = useState(startTasks());\n  const [editFormOpen, setEditFormOpen] = useState(false);\n  const [toEdit, setToEdit] = useState({});\n\n  useEffect(async () => {\n    const result = await axios(\n      'http://localhost:3001/api/getData',\n    );\n    console.log(result.data);\n  });\n\n  function startTasks() {\n    // here should be: determine where the later information (API or LocalStorage) is to enter it into tasks startTasks\n    let returnLocalStorage = JSON.parse(localStorage.getItem(\"allTasksInLocalStorage\"));\n    if (returnLocalStorage){\n      return returnLocalStorage.allTasks;\n    } else {\n      return [\n          {\n            text: \"ToDo Anton\",\n            completed: false\n          },\n          {\n            text: \"React hook\",\n            completed: false\n          },\n          {\n            text: \"See my friend\",\n            completed: false\n          }\n      ]\n    }\n  }\n\n  function saveTasksInLocalStorage() {\n    let ForLocalStorage = {\"allTasks\": tasks}\n    let serialForLocalStorage = JSON.stringify(ForLocalStorage);\n    localStorage.setItem(\"allTasksInLocalStorage\", serialForLocalStorage);\n  }\n  saveTasksInLocalStorage();\n\n  const addTasks = text => {\n      const Tasks = [...tasks, { text }];\n      setTasks(Tasks);\n  };\n\n  const removeTask = index => {\n    const Tasks = [...tasks];\n    Tasks.splice(index, 1);\n    setTasks(Tasks);\n    setEditFormOpen(false);\n  };\n\n  const completedTask = index => {\n    const Tasks = [...tasks];\n    console.log(Tasks, Tasks[index].completed);\n    if (Tasks[index].completed){\n      Tasks[index].completed = false\n    } else {\n      Tasks[index].completed = true\n    }\n    setTasks(Tasks);\n  }\n\n  const taskPositionСhange = (index, direction) => {\n    const Tasks = [...tasks];\n    console.log(Tasks, direction);\n    let temporaryStorage = Tasks[index];\n    console.log( temporaryStorage );\n    if (direction === \"top\"){\n      Tasks[index] = Tasks[index-1];\n      Tasks[index-1] = temporaryStorage;\n    }\n    if (direction === \"down\"){\n      Tasks[index] = Tasks[index+1];\n      Tasks[index+1] = temporaryStorage;\n    }\n    setTasks(Tasks);\n  }\n\n  const editTask = index => {\n    const Tasks = [...tasks];\n    setEditFormOpen(true);\n    setToEdit(\n      {\n        text: (Tasks[index].text),\n        index: index\n      });\n  }\n\n  const addEditTasks = (index, text) => {\n      console.log(text, index);\n      const Tasks = [...tasks];\n      Tasks[index].text = text;\n      setTasks(Tasks);\n  };\n\n  return (\n     <div className=\"сontainer\">\n      <h4> To Do list </h4>\n      <AddNewTask addTasks={addTasks} />\n      {editFormOpen ?\n        <EditForm\n          addTasks={addTasks}\n          toEdit={toEdit}\n          setEditFormOpen={setEditFormOpen}\n          addEditTasks={addEditTasks}\n        />\n      : \"\"}\n      {tasks.map((task, index, arr) => (\n        <TasksList\n          numberOfAllTasks={arr.length}\n          task={task}\n          index={index}\n          key={index}\n          removeTask={removeTask}\n          completedTask ={completedTask}\n          taskPositionСhange ={taskPositionСhange}\n          editTask ={editTask}\n          editFormOpen={editFormOpen}\n        />\n      ))}\n     </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}